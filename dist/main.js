!function(){"use strict";class e{constructor(e){this._modal=document.querySelector(e),this._modalClose=this._modal.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){window.addEventListener("keydown",this._handleEscClose),this._modal.classList.add("modal_open")}close(){this._modal.classList.remove("modal_open"),window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modalClose.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_open")&&this.close()}))}}class t extends e{constructor(e){let{modalSelector:t,handleFormSubmit:i}=e;super(t),this._form=this._modal.querySelector(".modal__form"),this._handleFormSubmit=i,this.setEventListeners()}_getInputValues(){return this._inputList=this._form.querySelectorAll(".modal__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}reset(){this._form.reset()}}class i{constructor(e){let{data:t,selector:i,clickEventHandler:s,deleteEventHandler:r,likeEventHandler:n}=e;console.log(t),this._src=t.link,this._alt=t.name,this._textContent=t.name,this._selector=i,this._clickEventHandler=s,this._deleteEventHandler=r,this._likeEventHandler=n}_getTemplate(){return document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0)}_fillImageCard(){this._cardImage.src=this._src,this._cardImage.alt=this._alt,this._cardLabel.textContent=this._textContent}setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._clickEventHandler()})),this._deleteCardButton.addEventListener("click",(e=>{this._deleteEventHandler(e)})),this._cardLikeButton.addEventListener("click",(e=>{this._likeEventHandler(e)}))}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardLikeButton=this._element.querySelector(".card__heart"),this._deleteCardButton=this._element.querySelector(".card__delete"),this._cardLabel=this._element.querySelector(".card__label-text"),this._fillImageCard(),this.setEventListeners(),this._element}}function s(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class r{constructor(e,t){s(this,"_showInputError",((e,t)=>{const i=this._formElement.querySelector(`#${e.id}-error`);i.textContent=t,i.classList.add(this._configDict.errorClass)})),s(this,"_hideInputError",(e=>{const t=this._formElement.querySelector(`#${e.id}-error`);t.classList.remove(this._configDict.errorClass),t.textContent=""})),s(this,"_hasInValidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),s(this,"_toggleButtonState",(()=>{this._hasInValidInput()?this._disableSubmit():(this._buttonElement.classList.remove(this._configDict.inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))})),s(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),s(this,"_disableSubmit",(()=>{this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._configDict.inactiveButtonClass)})),s(this,"enableValidation",(()=>{this._setEventListeners()})),s(this,"resetValidation",(()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableSubmit()})),this._configDict=e,this._formElement=t}_setEventListeners(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._inputList=Array.from(this._formElement.querySelectorAll(this._configDict.inputSelector)),this._buttonElement=this._formElement.querySelector(this._configDict.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("reset",(()=>{this._disableSubmit()}))}}class n extends e{constructor(e,t){let{src:i,alt:s}=e;super(t),this._src=i,this._alt=s,this._modalImage=this._modal.querySelector(".modal__image-expanded"),this._modalText=this._modal.querySelector(".modal__image-label"),super.setEventListeners(),console.log(this._src),console.log(this._alt)}open(){this._modalImage.src=this._src,this._modalImage.alt=this._alt,this._modalText.textContent=this._alt,console.log(this._modalImage.src),super.open()}}const o={formSelector:".modal__form",inputSelector:".modal__input",inputErrorSelector:".modal__input-error",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_inactive",errorClass:"modal__input-error_display"},l=Array.from(document.querySelectorAll(o.formSelector)),a=document.querySelector(".profile__pen"),c=document.querySelector("#profile-edit"),d=c.querySelector(".modal__form").name,m=c.querySelector("#profile-modal-name"),_=c.querySelector("#profile-modal-job"),h="#card",u=document.querySelector(".profile__add-button"),p=(document.querySelector("#add-card").querySelector(".modal__form"),{});l.forEach((e=>{const t=new r(o,e);p[e.name]=t,t.enableValidation()}));const f=new class{constructor(e){let{nameSelector:t,jobSelector:i}=e;this._nameSelector=t,this._jobSelector=i,this._profileName=document.querySelector(t),this._profileJob=document.querySelector(i)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}}({nameSelector:".profile__name",jobSelector:".profile__name-tag"}),E=new t({modalSelector:"#profile-edit",handleFormSubmit:e=>{f.setUserInfo(e["profile-modal-name"],e["profile-modal-job"]),E.close(),E.reset()}});a.addEventListener("click",(function(){p[d].resetValidation(),function(){const e=f.getUserInfo();m.value=e.profileName,_.value=e.profileJob}(),E.open()}));const v=new class{constructor(e,t){let{items:i,renderer:s}=e;this._renderer=s,this._initialArray=i,this._containerSelector=document.querySelector(t)}renderItems(){this._initialArray.forEach((e=>{this._renderer(e)}))}addItem(e){this._containerSelector.append(e)}prependItem(e){this._containerSelector.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},,{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=new n({src:e.link,alt:e.name},"#image-modal"),s=new i({data:e,selector:h,clickEventHandler:()=>{t.open()},deleteEventHandler:e=>{e.target.closest(".card").remove()},likeEventHandler:e=>{e.target.classList.toggle("card__heart_like")}}).getCardElement();v.addItem(s)}},".content__list");v.renderItems();const g=new t({modalSelector:"#add-card",handleFormSubmit:e=>{const t=e["add-card-title"],s=e["add-card-image-url"],r=new n({src:t,alt:s},"#image-modal"),o=new i({data:{name:t,link:s},selector:h,clickEventHandler:()=>{r.open()},deleteEventHandler:e=>{e.target.closest(".card").remove()},likeEventHandler:e=>{e.target.classList.toggle("card__heart_like")}}).getCardElement();v.prependItem(o),g.close(),g.reset()}});u.addEventListener("click",(function(){g.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,