!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:i}=e;this._renderer=i,this._initialArray=r,this._container=document.querySelector(t)}renderItems(){this._initialArray.forEach(this._renderer)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class t{constructor(e){this._modal=document.querySelector(e),this._modalClose=this._modal.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){window.addEventListener("keydown",this._handleEscClose),this._modal.classList.add("modal_open")}close(){this._modal.classList.remove("modal_open"),window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modalClose.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_open")&&this.close()}))}}class r extends t{constructor(e){let{modalSelector:t,handleFormSubmit:r}=e;super(t),this._form=this._modal.querySelector(".modal__form"),this._handleFormSubmit=r,this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__submit"),this._submitButtonText=this._submitButton.textContent,this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}reset(){this._form.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close()}}class i{constructor(e){let{data:t,selector:r,clickEventHandler:i,deleteEventHandler:s,likeEventHandler:n}=e;this._src=t.link,this._alt=t.name,this._textContent=t.name,this._likes=t.likes,this._ownerInd=t.ownerInd,this._cardLiked=t.cardLiked,this._selector=r,this._clickEventHandler=i,this._deleteEventHandler=s,this._likeEventHandler=n}_getTemplate(){return document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0)}_fillImageCard(){this._cardImage.src=this._src,this._cardImage.alt=this._alt,this._cardLabel.textContent=this._textContent,this._cardLikes.textContent=this._likes,this._cardLiked?this.likeCard():this.unlikeCard(),this._ownerInd||this._deleteCardButton.classList.add("card__delete_disable")}_handleDeleteCard(e){this._deleteEventHandler()}setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._clickEventHandler()})),this._ownerInd&&this._deleteCardButton.addEventListener("click",(e=>{this._deleteEventHandler()})),this._cardLikeButton.addEventListener("click",(e=>{this._likeEventHandler()}))}likeCard(){this._cardLikeButton.classList.add("card__heart_like"),this._cardLiked=!0}unlikeCard(){this._cardLikeButton.classList.remove("card__heart_like"),this._cardLiked=!1}isCardLiked(){return this._cardLiked}removeCardElement(){this._element.remove()}updateLikes(e){this._cardLikes.textContent=e}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardLikeButton=this._element.querySelector(".card__heart"),this._deleteCardButton=this._element.querySelector(".card__delete"),this._cardLabel=this._element.querySelector(".card__label-text"),this._cardLikes=this._element.querySelector(".card__likes"),this._fillImageCard(),this.setEventListeners(),this._element}}function s(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class n{constructor(e,t){s(this,"_showInputError",((e,t)=>{const r=this._formElement.querySelector(`#${e.id}-error`);r.textContent=t,r.classList.add(this._configDict.errorClass)})),s(this,"_hideInputError",(e=>{const t=this._formElement.querySelector(`#${e.id}-error`);t.classList.remove(this._configDict.errorClass),t.textContent=""})),s(this,"_hasInValidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),s(this,"_toggleButtonState",(()=>{this._hasInValidInput()?this._disableSubmit():(this._buttonElement.classList.remove(this._configDict.inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))})),s(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),s(this,"_disableSubmit",(()=>{this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._configDict.inactiveButtonClass)})),s(this,"enableValidation",(()=>{this._setEventListeners()})),s(this,"resetValidation",(()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableSubmit()})),this._configDict=e,this._formElement=t}_setEventListeners(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._inputList=Array.from(this._formElement.querySelectorAll(this._configDict.inputSelector)),this._buttonElement=this._formElement.querySelector(this._configDict.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("reset",(()=>{this._disableSubmit()}))}}const a={formSelector:".modal__form",inputSelector:".modal__input",inputErrorSelector:".modal__input-error",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_inactive",errorClass:"modal__input-error_display"},o=document.querySelector(".profile__pen"),l=document.querySelector(".profile__avatar"),d=document.querySelector(".profile__avatar-edit"),c=document.querySelector("#profile-edit"),h=c.querySelector(".modal__form").name,_=c.querySelector("#profile-modal-name"),m=c.querySelector("#profile-modal-job"),u=document.querySelector(".profile__add-button"),f=Array.from(document.querySelectorAll(a.formSelector)),p={};f.forEach((e=>{const t=new n(a,e);p[e.name]=t,t.enableValidation()}));const v=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:i}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(r),this._avatarSelector=document.querySelector(i)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t,this._avatarSelector.alt=`Profile image of ${e}`}setAvatar(e,t){this._avatarSelector.src=e,this._avatarSelector.alt=t}}({nameSelector:".profile__name",jobSelector:".profile__name-tag",avatarSelector:".profile__avatar"}),b=(document.querySelector("#profile-edit").querySelector(".modal__submit"),new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error updating user information: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}addNewPicture(e){return fetch(`${this._baseUrl}/cards `,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateLikeCard(e,t){return t?fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse):fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",body:JSON.stringify(e),headers:this._headers}).then(this._checkResponse)}performPromiseAll(e){return Promise.all(e)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24","Content-Type":"application/json"}})),S=new r({modalSelector:"#profile-edit",handleFormSubmit:e=>{S.renderLoading(!0,"Saving..."),b.updateUserInfo({name:e["profile-modal-name"],about:e["profile-modal-job"]}).then((e=>{v.setUserInfo(e.name,e.about),S.close()})).catch((e=>{console.log(e)})).finally((()=>{S.renderLoading(!1)}))}});o.addEventListener("click",(function(){p[h].resetValidation(),function(){const e=v.getUserInfo();_.value=e.profileName,m.value=e.profileJob}(),S.open()}));const E=new class extends t{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__image-expanded"),this._modalText=this._modal.querySelector(".modal__image-label"),super.setEventListeners()}open(e){let{src:t,alt:r}=e;this._modalImage.src=t,this._modalImage.alt=r,this._modalText.textContent=r,super.open()}}("#image-modal"),g=new r({modalSelector:"#delete-card-confirmation",handleFormSubmit:()=>{}});function k(e){const t=new i({data:e,selector:"#card",clickEventHandler:()=>{E.open({src:e.link,alt:e.name})},deleteEventHandler:()=>{g.open(),g.setSubmitAction((()=>{b.deleteCard(e.imageId).then((e=>{t.removeCardElement(),g.close()})).catch((e=>console.log(e)))}))},likeEventHandler:()=>{b.updateLikeCard(e.imageId,t.isCardLiked()).then((e=>{q(e.likes)?t.likeCard():t.unlikeCard(),t.updateLikes(e.likes.length)})).catch((e=>{console.log(e)}))}});return t}document.querySelector("#add-card").querySelector(".modal__submit");const L=new r({modalSelector:"#add-card",handleFormSubmit:e=>{L.renderLoading(!0,"Saving...");const t={name:e["add-card-title"],link:e["add-card-image-url"]};b.addNewPicture(t).then((e=>{const t=k({name:e.name,link:e.link,ownerInd:!0,cardLiked:!1,likes:0,imageId:e._id}).getCardElement();C.prependItem(t),L.reset(),L.close()})).catch((e=>{console.log(e),L.close()})).finally((()=>{L.renderLoading(!1)}))}});u.addEventListener("click",(function(){L.open()})),document.querySelector("#avatar-edit").querySelector(".modal__submit");const y=new r({modalSelector:"#avatar-edit",handleFormSubmit:e=>{y.renderLoading(!0,"Saving..."),b.updateAvatar({avatar:e["avatar-url"]}).then((t=>{!function(e){const t=l.src;v.setAvatar(e,`Profile of ${I.name}`),l.onerror=()=>{v.setAvatar(t,`Profile of ${I.name}`),console.log("Error: Not able to load new Avatar. Avatar unchanged!!")}}(e["avatar-url"]),y.close()})).catch((e=>{console.log(e)})).finally((()=>{y.renderLoading(!1)}))}});l.addEventListener("mouseover",(e=>{d.classList.add("profile__avatar-edit_show")})),d.addEventListener("mouseout",(e=>{d.classList.remove("profile__avatar-edit_show")})),d.addEventListener("click",(e=>{y.open()}));let C="";const I={};function q(e){for(let t=0;t<e.length;t++)if(e[t]._id==I.userId)return!0;return!1}!function(){const t=[];b.performPromiseAll([b.getInitialCards(),b.getUserInfo()]).then((r=>{let[i,s]=r;I.name=s.name,I.about=s.about,I.avatarUrl=s.avatar,I.userId=s._id,v.setUserInfo(I.name,I.about),v.setAvatar(I.avatarUrl,`Profile of ${I.name}`),l.onload=()=>{i.forEach((e=>{const r=I.userId===e.owner._id,i=q(e.likes);t.push({name:e.name,link:e.link,likes:e.likes.length,ownerInd:r,imageId:e._id,cardLiked:i})})),function(t){C=new e({items:t,renderer:e=>{const t=k(e).getCardElement();C.addItem(t)}},".content__list"),C.renderItems()}(t)},l.onerror=()=>console.log("Error: Not able to load Avatar!!")})).catch((e=>{console.log(`Error while loading the initial page: ${e.status}`)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,