!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:n}=e;this._renderer=n,this._initialArray=r,this._container=document.querySelector(t)}renderItems(){this._initialArray.forEach(this._renderer)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class t{constructor(e){this._modal=document.querySelector(e),this._modalClose=this._modal.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){window.addEventListener("keydown",this._handleEscClose),this._modal.classList.add("modal_open")}close(){this._modal.classList.remove("modal_open"),window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modalClose.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_open")&&this.close()}))}}class r extends t{constructor(e){let{modalSelector:t,handleFormSubmit:r}=e;super(t),this._form=this._modal.querySelector(".modal__form"),this._handleFormSubmit=r,this._inputList=this._form.querySelectorAll(".modal__input"),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}reset(){this._form.reset()}close(){super.close()}}class n{constructor(e){let{data:t,selector:r,clickEventHandler:n,deleteEventHandler:o,likeEventHandler:i}=e;this._src=t.link,this._alt=t.name,this._textContent=t.name,this._likes=t.likes,this._ownerInd=t.ownerInd,this._cardLiked=t.cardLiked,this._selector=r,this._clickEventHandler=n,this._deleteEventHandler=o,this._likeEventHandler=i}_getTemplate(){return document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0)}_fillImageCard(){this._cardImage.src=this._src,this._cardImage.alt=this._alt,this._cardLabel.textContent=this._textContent,this._cardLikes.textContent=this._likes}_handleDeleteCard(e){this._deleteEventHandler()}setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._clickEventHandler()})),this._deleteCardButton.addEventListener("click",(e=>{this._deleteEventHandler()})),this._cardLikeButton.addEventListener("click",(e=>{this._likeEventHandler()}))}likeCard(){this._cardLikeButton.classList.add("card__heart_like"),this._cardLiked=!0}unlikeCard(){this._cardLikeButton.classList.remove("card__heart_like"),this._cardLiked=!1}isCardLiked(){return this._cardLiked}removeCardElement(){this._element.remove()}updateLikes(e){this._cardLikes.textContent=e}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardLikeButton=this._element.querySelector(".card__heart"),this._deleteCardButton=this._element.querySelector(".card__delete"),this._cardLabel=this._element.querySelector(".card__label-text"),this._cardLikes=this._element.querySelector(".card__likes"),this._fillImageCard(),this.setEventListeners(),this._ownerInd||this._deleteCardButton.classList.add("card__delete_disable"),this._cardLiked?this.likeCard():this.unlikeCard(),this._element}}function o(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class i{constructor(e,t){o(this,"_showInputError",((e,t)=>{const r=this._formElement.querySelector(`#${e.id}-error`);r.textContent=t,r.classList.add(this._configDict.errorClass)})),o(this,"_hideInputError",(e=>{const t=this._formElement.querySelector(`#${e.id}-error`);t.classList.remove(this._configDict.errorClass),t.textContent=""})),o(this,"_hasInValidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),o(this,"_toggleButtonState",(()=>{this._hasInValidInput()?this._disableSubmit():(this._buttonElement.classList.remove(this._configDict.inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))})),o(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),o(this,"_disableSubmit",(()=>{this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._configDict.inactiveButtonClass)})),o(this,"enableValidation",(()=>{this._setEventListeners()})),o(this,"resetValidation",(()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableSubmit()})),this._configDict=e,this._formElement=t}_setEventListeners(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._inputList=Array.from(this._formElement.querySelectorAll(this._configDict.inputSelector)),this._buttonElement=this._formElement.querySelector(this._configDict.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("reset",(()=>{this._disableSubmit()}))}}class s{constructor(e){let{baseUrl:t,token:r}=e;this._baseUrl=t,this._token=r,this._baseUrl.endsWith("/")&&(this._baseUrl=this._baseUrl.substr(0,this._baseUrl.length-1))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateUserInfo(e,t){return t.textContent="Saving...",fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify(e)})}addNewPicture(e,t){return t.textContent="Saving...",fetch(`${this._baseUrl}/cards `,{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify(e)})}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._token}})}updateLikeCard(e,t){return t?fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:{authorization:this._token}}):fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._token}})}updateAvatar(e,t){return t.textContent="Saving...",fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",body:JSON.stringify(e),headers:{authorization:this._token,"Content-Type":"application/json"}})}performPromiseAll(e){return Promise.all(e)}}const a={baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"51b8259d-f8d1-4b7c-b443-194620edca24"},l={formSelector:".modal__form",inputSelector:".modal__input",inputErrorSelector:".modal__input-error",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_inactive",errorClass:"modal__input-error_display"},d=Array.from(document.querySelectorAll(l.formSelector)),c=document.querySelector(".profile__pen"),h=document.querySelector(".profile__name"),_=document.querySelector(".profile__name-tag"),u=document.querySelector(".profile__avatar"),m=document.querySelector(".profile__avatar-edit"),p=(document.querySelector("#avatar-edit"),document.querySelector("#profile-edit")),f=p.querySelector(".modal__form").name,v=p.querySelector("#profile-modal-name"),E=p.querySelector("#profile-modal-job"),b=document.querySelector(".profile__add-button"),k={};d.forEach((e=>{const t=new i(l,e);k[e.name]=t,t.enableValidation()}));const g=new class{constructor(e){let{nameSelector:t,jobSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(r)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}}({nameSelector:".profile__name",jobSelector:".profile__name-tag"}),S=document.querySelector("#profile-edit").querySelector(".modal__submit"),L=S.textContent,y=new r({modalSelector:"#profile-edit",handleFormSubmit:e=>{new s(a).updateUserInfo({name:e["profile-modal-name"],about:e["profile-modal-job"]},S).then((e=>e.ok?e.json():Promise.reject(`Error while updating the Profile: ${e.status}`))).then((e=>{g.setUserInfo(e.name,e.about),S.textContent=L,y.close()})).catch((e=>{console.log(e),y.close()}))}});c.addEventListener("click",(function(){k[f].resetValidation(),function(){const e=g.getUserInfo();v.value=e.profileName,E.value=e.profileJob}(),y.open()}));const C=new class extends t{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__image-expanded"),this._modalText=this._modal.querySelector(".modal__image-label"),super.setEventListeners()}open(e){let{src:t,alt:r}=e;this._modalImage.src=t,this._modalImage.alt=r,this._modalText.textContent=r,super.open()}}("#image-modal");function w(e){const t=new n({data:e,selector:"#card",clickEventHandler:()=>{C.open({src:e.link,alt:e.name})},deleteEventHandler:()=>{const n=new r({modalSelector:"#delete-card-confirmation",handleFormSubmit:()=>{new s(a).deleteCard(e.imageId).then((e=>{e.ok?(t.removeCardElement(),n.close()):console.log(`Error while deleting the card. ${e.status}`)}))}});n.open()},likeEventHandler:()=>{new s(a).updateLikeCard(e.imageId,t.isCardLiked()).then((e=>e.ok?e.json():Promise.reject(`Error while updating the likes. ${e.status}`))).then((e=>{B(e.likes)?t.likeCard():t.unlikeCard(),t.updateLikes(e.likes.length)})).catch((e=>{console.log(e)}))}});return t}const I=document.querySelector("#add-card").querySelector(".modal__submit"),q=I.textContent,x=new r({modalSelector:"#add-card",handleFormSubmit:e=>{const t={name:e["add-card-title"],link:e["add-card-image-url"]};new s(a).addNewPicture(t,I).then((e=>(console.log(q),e.ok?e.json():Promise.reject(`Error while adding new image: ${e.status}`)))).then((e=>{const t=w({name:e.name,link:e.link,ownerInd:!0,cardLiked:!1,likes:0}).getCardElement();P.prependItem(t),I.textContent=q,x.reset(),x.close()})).catch((e=>{console.log(e),x.close()}))}});b.addEventListener("click",(function(){x.open()}));const U=document.querySelector("#avatar-edit").querySelector(".modal__submit"),j=U.textContent,$=new r({modalSelector:"#avatar-edit",handleFormSubmit:e=>{const t={avatar:e["avatar-url"]};new s(a).updateAvatar(t,U).then((e=>e.ok?e.json():Promise.reject(`Error while adding new avatar: ${e.status}`))).then((t=>{!function(e){const t=u.src;u.src=e,u.onerror=()=>{u.src=t,console.log("Error: Not able to load new Avatar. Avatar unchanged!!")}}(e["avatar-url"]),U.textContent=j,$.close()})).catch((e=>{console.log(e),$.close()}))}});u.addEventListener("mouseover",(e=>{m.classList.add("profile__avatar-edit_show")})),m.addEventListener("mouseout",(e=>{m.classList.remove("profile__avatar-edit_show")})),m.addEventListener("click",(e=>{$.open()}));let P="";const A={};function B(e){for(let t=0;t<e.length;t++)if(e[t]._id==A._id)return!0;return!1}!function(){const t=[],r=new s(a).getInitialCards().then((e=>e)).catch((e=>{console.log(e)})),n=new s(a).getUserInfo().then((e=>e)).catch((e=>{console.log(e)}));new s(a).performPromiseAll([r,n]).then((r=>{A.name=r[1].name,A.about=r[1].about,A.avatar=r[1].avatar,A._id=r[1]._id,r[0].forEach((e=>{const r=A._id===e.owner._id,n=B(e.likes);t.push({name:e.name,link:e.link,likes:e.likes.length,ownerInd:r,imageId:e._id,cardLiked:n})})),function(t,r){h.textContent=t.name,_.textContent=t.about,u.src=t.avatar,u.alt=`Profile of ${t.name}`,u.onload=()=>{!function(t){P=new e({items:t,renderer:e=>{const t=w(e).getCardElement();P.addItem(t)}},".content__list"),P.renderItems()}(r)},u.onerror=()=>console.log("Error: Not able to load Avatar!!")}(A,t)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,