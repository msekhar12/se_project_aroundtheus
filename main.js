!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:o}=e;this._renderer=o,this._initialArray=r,this._container=document.querySelector(t)}renderItems(){this._initialArray.forEach(this._renderer)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class t{constructor(e){this._modal=document.querySelector(e),this._modalClose=this._modal.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){window.addEventListener("keydown",this._handleEscClose),this._modal.classList.add("modal_open")}close(){this._modal.classList.remove("modal_open"),window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modalClose.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_open")&&this.close()}))}}class r extends t{constructor(e){let{modalSelector:t,handleFormSubmit:r}=e;super(t),this._form=this._modal.querySelector(".modal__form"),this._handleFormSubmit=r,this._inputList=this._form.querySelectorAll(".modal__input"),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}reset(){this._form.reset()}close(){super.close()}}class o{constructor(e){let{data:t,selector:r,clickEventHandler:o,deleteEventHandler:s,likeEventHandler:n}=e;this._src=t.link,this._alt=t.name,this._textContent=t.name,this._likes=t.likes,this._ownerInd=t.ownerInd,this._cardLiked=t.cardLiked,this._selector=r,this._clickEventHandler=o,this._deleteEventHandler=s,this._likeEventHandler=n}_getTemplate(){return document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0)}_fillImageCard(){this._cardImage.src=this._src,this._cardImage.alt=this._alt,this._cardLabel.textContent=this._textContent,this._cardLikes.textContent=this._likes,this._cardLiked?this.likeCard():this.unlikeCard(),this._ownerInd||this._deleteCardButton.classList.add("card__delete_disable")}_handleDeleteCard(e){this._deleteEventHandler()}setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._clickEventHandler()})),this._ownerInd&&this._deleteCardButton.addEventListener("click",(e=>{this._deleteEventHandler()})),this._cardLikeButton.addEventListener("click",(e=>{this._likeEventHandler()}))}likeCard(){this._cardLikeButton.classList.add("card__heart_like"),this._cardLiked=!0}unlikeCard(){this._cardLikeButton.classList.remove("card__heart_like"),this._cardLiked=!1}isCardLiked(){return this._cardLiked}removeCardElement(){this._element.remove()}updateLikes(e){this._cardLikes.textContent=e}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardLikeButton=this._element.querySelector(".card__heart"),this._deleteCardButton=this._element.querySelector(".card__delete"),this._cardLabel=this._element.querySelector(".card__label-text"),this._cardLikes=this._element.querySelector(".card__likes"),this._fillImageCard(),this.setEventListeners(),this._element}}function s(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class n{constructor(e,t){s(this,"_showInputError",((e,t)=>{const r=this._formElement.querySelector(`#${e.id}-error`);r.textContent=t,r.classList.add(this._configDict.errorClass)})),s(this,"_hideInputError",(e=>{const t=this._formElement.querySelector(`#${e.id}-error`);t.classList.remove(this._configDict.errorClass),t.textContent=""})),s(this,"_hasInValidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),s(this,"_toggleButtonState",(()=>{this._hasInValidInput()?this._disableSubmit():(this._buttonElement.classList.remove(this._configDict.inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))})),s(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),s(this,"_disableSubmit",(()=>{this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._configDict.inactiveButtonClass)})),s(this,"enableValidation",(()=>{this._setEventListeners()})),s(this,"resetValidation",(()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableSubmit()})),this._configDict=e,this._formElement=t}_setEventListeners(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._inputList=Array.from(this._formElement.querySelectorAll(this._configDict.inputSelector)),this._buttonElement=this._formElement.querySelector(this._configDict.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("reset",(()=>{this._disableSubmit()}))}}class i{constructor(e){this._options=e}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error updating user information: ${e.status}`)}getInitialCards(){return fetch(`${this._options.baseUrl}/cards`,{headers:this._options.headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._options.baseUrl}/users/me`,{headers:this._options.headers}).then(this._checkResponse)}updateUserInfo(){return fetch(`${this._options.baseUrl}/users/me`,{method:"PATCH",headers:this._options.headers,body:this._options.body}).then(this._checkResponse)}addNewPicture(){return fetch(`${this._options.baseUrl}/cards `,{method:"POST",headers:this._options.headers,body:this._options.body}).then(this._checkResponse)}deleteCard(){return fetch(`${this._options.baseUrl}/cards/${this._options.cardId}`,{method:"DELETE",headers:this._options.headers}).then(this._checkResponse)}updateLikeCard(){return this._options.cardLiked?fetch(`${this._options.baseUrl}/cards/likes/${this._options.cardId}`,{method:"DELETE",headers:this._options.headers}).then(this._checkResponse):fetch(`${this._options.baseUrl}/cards/likes/${this._options.cardId}`,{method:"PUT",headers:this._options.headers}).then(this._checkResponse)}updateAvatar(){return fetch(`${this._options.baseUrl}/users/me/avatar`,{method:"PATCH",body:this._options.body,headers:this._options.headers}).then(this._checkResponse)}performPromiseAll(e){return Promise.all(e)}}const a={formSelector:".modal__form",inputSelector:".modal__input",inputErrorSelector:".modal__input-error",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_inactive",errorClass:"modal__input-error_display"},l=Array.from(document.querySelectorAll(a.formSelector)),d=document.querySelector(".profile__pen"),c=document.querySelector(".profile__name"),h=document.querySelector(".profile__name-tag"),_=document.querySelector(".profile__avatar"),u=document.querySelector(".profile__avatar-edit"),m=(document.querySelector("#avatar-edit"),document.querySelector("#profile-edit")),p=m.querySelector(".modal__form").name,f=m.querySelector("#profile-modal-name"),b=m.querySelector("#profile-modal-job"),v=document.querySelector(".profile__add-button"),E={};l.forEach((e=>{const t=new n(a,e);E[e.name]=t,t.enableValidation()}));const S=new class{constructor(e){let{nameSelector:t,jobSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(r)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}}({nameSelector:".profile__name",jobSelector:".profile__name-tag"}),k=document.querySelector("#profile-edit").querySelector(".modal__submit"),g=k.textContent,y=new r({modalSelector:"#profile-edit",handleFormSubmit:e=>{k.textContent="Saving...";const t={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24","Content-Type":"application/json"},body:JSON.stringify({name:e["profile-modal-name"],about:e["profile-modal-job"]})};new i(t).updateUserInfo().then((e=>{S.setUserInfo(e.name,e.about),k.textContent=g,y.close()})).catch((e=>{console.log(e),y.close()}))}});d.addEventListener("click",(function(){E[p].resetValidation(),function(){const e=S.getUserInfo();f.value=e.profileName,b.value=e.profileJob}(),y.open()}));const L=new class extends t{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__image-expanded"),this._modalText=this._modal.querySelector(".modal__image-label"),super.setEventListeners()}open(e){let{src:t,alt:r}=e;this._modalImage.src=t,this._modalImage.alt=r,this._modalText.textContent=r,super.open()}}("#image-modal"),C=new r({modalSelector:"#delete-card-confirmation",handleFormSubmit:()=>{}});function I(e){const t=new o({data:e,selector:"#card",clickEventHandler:()=>{L.open({src:e.link,alt:e.name})},deleteEventHandler:()=>{const r={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24"},cardId:e.imageId};C.open(),C.setSubmitAction((()=>{new i(r).deleteCard().then((e=>{t.removeCardElement(),C.close()})).catch((e=>console.log(e)))}))},likeEventHandler:()=>{const r={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24"},cardId:e.imageId,cardLiked:t.isCardLiked()};new i(r).updateLikeCard().then((e=>{P(e.likes)?t.likeCard():t.unlikeCard(),t.updateLikes(e.likes.length)})).catch((e=>{console.log(e)}))}});return t}const w=document.querySelector("#add-card").querySelector(".modal__submit"),q=w.textContent,x=new r({modalSelector:"#add-card",handleFormSubmit:e=>{w.textContent="Saving...";const t={name:e["add-card-title"],link:e["add-card-image-url"]},r={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24","Content-Type":"application/json"},body:JSON.stringify(t)};new i(r).addNewPicture().then((e=>{const t=I({name:e.name,link:e.link,ownerInd:!0,cardLiked:!1,likes:0,imageId:e._id}).getCardElement();H.prependItem(t),w.textContent=q,x.reset(),x.close()})).catch((e=>{console.log(e),x.close()}))}});v.addEventListener("click",(function(){x.open()}));const U=document.querySelector("#avatar-edit").querySelector(".modal__submit"),A=U.textContent,B=new r({modalSelector:"#avatar-edit",handleFormSubmit:e=>{const t={avatar:e["avatar-url"]},r={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24","Content-Type":"application/json"},body:JSON.stringify(t)};U.textContent="Saving...",new i(r).updateAvatar().then((t=>{!function(e){const t=_.src;_.src=e,_.onerror=()=>{_.src=t,console.log("Error: Not able to load new Avatar. Avatar unchanged!!")}}(e["avatar-url"]),U.textContent=A,B.close()})).catch((e=>{U.textContent=A,console.log(e),B.close()}))}});_.addEventListener("mouseover",(e=>{u.classList.add("profile__avatar-edit_show")})),u.addEventListener("mouseout",(e=>{u.classList.remove("profile__avatar-edit_show")})),u.addEventListener("click",(e=>{B.open()}));let H="";const $={};function P(e){for(let t=0;t<e.length;t++)if(e[t]._id==$._id)return!0;return!1}!function(){const t=[],r={baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51b8259d-f8d1-4b7c-b443-194620edca24"}},o=new i(r).getInitialCards().then((e=>e)).catch((e=>{console.log(e)})),s=new i(r).getUserInfo().then((e=>e)).catch((e=>{console.log(e)}));new i(r).performPromiseAll([o,s]).then((r=>{$.name=r[1].name,$.about=r[1].about,$.avatar=r[1].avatar,$._id=r[1]._id,r[0].forEach((e=>{const r=$._id===e.owner._id,o=P(e.likes);t.push({name:e.name,link:e.link,likes:e.likes.length,ownerInd:r,imageId:e._id,cardLiked:o})})),function(t,r){c.textContent=t.name,h.textContent=t.about,_.src=t.avatar,_.alt=`Profile of ${t.name}`,_.onload=()=>{!function(t){H=new e({items:t,renderer:e=>{const t=I(e).getCardElement();H.addItem(t)}},".content__list"),H.renderItems()}(r)},_.onerror=()=>console.log("Error: Not able to load Avatar!!")}($,t)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,